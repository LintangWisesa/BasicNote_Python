
class Car:
	_wheel = 4
	_type = ""
	_merk = ""
	_owner = ""
	color = ""
	
	def __init__(self, owner="unknown", color="green", merk="unknown", types="Sport Car", wheeldrive=4):
		self._owner = owner
		self.color = color
		self._merk = merk
		self._type = types
		self._wheeldrive = wheeldrive

	def get_owner(self):
		return self._owner

	def start_engine(self):
		print ("Starting the car... ")
		print ("owner: %s" % self._owner)
		print ("color: %s" % self.color)
		print ("merk: %s" % self._merk)
		print ("type: %s" % self._type)
		print ("wheeldrive: %s" % self._wheeldrive)
	
    # Disini pembuatan destruktor
	def __del__(self):
		print ("Method __del__ is called. Car is destroyed...")


car = Car(wheeldrive=8)
car.start_engine()



#output
Starting the car... 
owner: unknown
color: green
merk: unknown
type: Sport Car
wheeldrive: 8
Method __del__ is called. Car is destroyed...


=================================================


Hampir sama dengan constructor, destructor secara otomatis akan dipanggil. Hanya saja dipanggil saat objek - objek yang dibuat dari suatu class dihancurkan oleh garbage collector. Baca lebih banyak tentang garbage collector

Hal ini sangat berguna bila kamu ingin menutup sebuah koneksi ke database atau ke file setelah proses pembuatan I/O dilakukan.

